@using BankingClient.Ui.Layout
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationProvider
@inject ILogger<App> Logger

<CascadingAuthenticationState>
  <Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
      <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
        <NotAuthorized>
          @if (context.User.Identity?.IsAuthenticated != true) {
            @if(true) Logger.LogInformation("App: Redirecting to /authentication/login");
            <RedirectToLogin/>
          }
          else {
            <p role="alert">You are not authorized to access this resource.</p>
          }
        </NotAuthorized>
      </AuthorizeRouteView>
      <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
    </Found>
    <NotFound>
      <PageTitle>Not found</PageTitle>
      <LayoutView Layout="@typeof(MainLayout)">
        <p role="alert">Sorry, there's nothing at this address.</p>
      </LayoutView>
    </NotFound>
  </Router>
</CascadingAuthenticationState>

@code {
  private bool _isEventSubscribed;

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      if (!_isEventSubscribed) {
        Logger.LogInformation("App: Subscribing to AuthenticationStateChanged event");
        AuthenticationProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        _isEventSubscribed = true;
      }

      // Initial authentication state check
      Logger.LogInformation("App: Initial authentication state check");
      var authState = await AuthenticationProvider.GetAuthenticationStateAsync();
      if (authState.User.Identity is { IsAuthenticated: true }) {
        Logger.LogInformation("App: User is authenticated, redirecting to /token");
        Navigation.NavigateTo("/token");
      }
    }
  }

  private void OnAuthenticationStateChanged(Task<AuthenticationState> task) {
    Logger.LogInformation("App: Handle authentication state changed");
    task.ContinueWith(async t => {
      var authState = await t;
      if (authState.User.Identity is { IsAuthenticated: true }) {
        Navigation.NavigateTo("/token");
      }
    });
  }

  public void Dispose() {
    if (!_isEventSubscribed) return;
    Logger.LogInformation("App: Unsubscribing from AuthenticationStateChanged event");
    AuthenticationProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    _isEventSubscribed = false;
  }
}