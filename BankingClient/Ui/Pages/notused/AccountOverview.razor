@page "/notused/accounts"

@using BankingClient.Ui.Components
@using BankingClient.Core
@using BankingClient.Core.Dto
@using BankingClient.Services
@inject IAccountService AccountService


<div class="flex-container">
    @if (_accounts != null && _accounts.Any())
    {
        @foreach (var account in _accounts)
        {
            <BankAccountCreditCard
                AccountBalance=@account.Balance
                AccountNumber=@account.Iban
                NewTransferCallback="() => NavigateNewTransfers(account.Id)"
                ShowTransactionsCallback="() => ShowTransactions(account.Id)"/>
        }
    }
    else
    {
        <p>No accounts found.</p>
    }
</div>

@code {
    [Inject] public required NavigationManager NavigationManager { get; set; }
    [Inject] public required UserStateHolder UserStateHolder { get; set; }
    
    //private BankAccountCard? _bankAccountCard;
    //private BankAccountCreditCard? _bankAccountCreditCard;
    private IEnumerable<AccountDto>? _accounts = [];
    private string _errorMessage = string.Empty;
    
    
    protected override async Task OnInitializedAsync() {
        // Fetch accounts for logged-in owner
        if (UserStateHolder.IsAuthenticated && UserStateHolder.OwnerDto?.Id != null) {
                var id = UserStateHolder.OwnerDto!.Id;
                var resultData = await AccountService.GetAllByOwner(id);
                switch (resultData) {
                    case ResultData<IEnumerable<AccountDto>?>.Success success:
                        _accounts = success.Data!;
                        break;
                    case ResultData<IEnumerable<AccountDto>?>.Error error:
                        NavigationManager.NavigateTo("/error");
                        _errorMessage = error.Exception.Message;
                        //HandleErrorEvent(error.Exception);
                        break;
                    case ResultData<IEnumerable<AccountDto>?>.Loading:
                        break;
                } // end switch
        } // end if authenticated
    } // end OnInitializedAsync

    private string FormatBalance(double balance) => 
        $"{balance} â‚¬";

    private void NavigateNewTransfers(Guid accountId)
    {  
        // go to /transfers page
       NavigationManager.NavigateTo($"/transfers/{accountId}"); 
    }

    private void ShowTransactions(Guid accountId)
    {
        //TODO go to /transactions page and show transactions of last month     
        NavigationManager.NavigateTo($"/transactions");
    }
}